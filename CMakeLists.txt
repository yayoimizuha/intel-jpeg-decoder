cmake_minimum_required(VERSION 3.27)

project(oneAPI_test CXX)

set(CMAKE_CXX_STANDARD 23)
#find_package(PkgConfig)
find_package(VPL REQUIRED)
find_package(IntelSYCL REQUIRED)
#pkg_check_modules(IntelMPI REQUIRED impi)
IF (WIN32)
    set(MPI_GUESS_LIBRARY_NAME "MSMPI")
ENDIF ()
find_package(MPI REQUIRED)
find_package(OpenMP)
#set(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
#set(CMAKE_CXX_COMPILER [=[C:\oneAPI\mpi\latest\bin\mpicc.bat]=])
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")


set(CMAKE_C_COMPILER ${MPI_C_COMPILER})
#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -cc=icx.exe")
message("MPI_CXX_COMPILER: ${MPI_CXX_COMPILER}")
message("MPI_CXX_COMPILE_OPTIONS: ${MPI_CXX_COMPILE_OPTIONS}")
message("MPI_CXX_COMPILE_DEFINITIONS: ${MPI_CXX_COMPILE_DEFINITIONS}")
message("MPI_CXX_INCLUDE_DIRS: ${MPI_CXX_INCLUDE_DIRS}")
message("MPI_CXX_LINK_FLAGS: ${MPI_CXX_LINK_FLAGS}")
message("MPI_CXX_LIBRARIES: ${MPI_CXX_LIBRARIES}")
message("MPI_CXX_COMPILER_INCLUDE_DIRS: ${MPI_CXX_COMPILER_INCLUDE_DIRS}")
message("MPI_CXX_LIB_NAMES: ${MPI_CXX_LIB_NAMES}")
message("MPI_LIBRARIES: ${MPI_LIBRARIES}")
message("MPI_COMPILE_CMDLINE: ${MPI_COMPILE_CMDLINE}")
#set(CMAKE_AR [=[C:\Program Files (x86)\Intel\oneAPI\compiler\2024.0\bin\compiler\llvm-ar.exe]=])
#set($ENV{LINKER}  "icx-cl -fsycl")
#add_link_options("-fsycl")
message("VPL_SHLIB_DIR: " ${VPL_SHLIB_DIR})
message("VPL_LIB_DIR: " ${VPL_LIB_DIR})
message("VPL_BIN_DIR: " ${VPL_BIN_DIR})
message("VPL_INCLUDE_DIR: " ${VPL_INCLUDE_DIR})

message("OpenMP_CXX_FLAGS: ${OpenMP_CXX_FLAGS}")
message("SYCL_FLAGS: ${SYCL_FLAGS}")

link_directories($ENV{LD_LIBRARY_PATH})

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsycl-link")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsycl /EHsc -fsycl-unnamed-lambda")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsycl-targets=intel_gpu_acm_g10")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Z7")

add_executable(JPEG_DECODER main.cpp)
add_executable(JPEG_DECODER_RGB dec_rgb.cpp)
add_executable(JPEG_DECODER_RGB4 dec_rgb4.cpp)
add_executable(example-hello-decode hello-decode.cpp)
add_executable(example-hello-decvpp hello-decvpp.cpp)
add_executable(qsv_jpeg_dec qsv_jpeg_dec.cpp)
#add_executable(double_step_qsv_jpeg_dec double_step_qsv_jpeg_dec.hpp)
add_executable(double-step double-step.cpp)
add_executable(double-step-sycl double-step-sycl.cpp)
add_executable(directx_test directx_test.cpp)
add_executable(MPI_test MPI_test.cpp)
add_executable(multi_threaded multi_threaded.cpp)
add_executable(header_call_test header_call_test.cpp)

include_directories(${VPL_INCLUDE_DIR})
include_directories(${MPI_CXX_INCLUDE_DIRS})

target_link_libraries(JPEG_DECODER ${VPL_LIB_DIR}/vpl.lib)
target_link_libraries(JPEG_DECODER_RGB ${VPL_LIB_DIR}/vpl.lib)
target_link_libraries(JPEG_DECODER_RGB4 ${VPL_LIB_DIR}/vpl.lib)
target_link_libraries(example-hello-decode ${VPL_LIB_DIR}/vpl.lib)
target_link_libraries(example-hello-decvpp ${VPL_LIB_DIR}/vpl.lib)
target_link_libraries(qsv_jpeg_dec ${VPL_LIB_DIR}/vpl.lib)
target_link_libraries(double-step ${VPL_LIB_DIR}/vpl.lib)
target_link_libraries(directx_test ${VPL_LIB_DIR}/vpl.lib)
target_link_libraries(directx_test DirectXTex.lib)
target_link_libraries(double-step-sycl ${VPL_LIB_DIR}/vpl.lib)
#target_link_libraries(double_step_qsv_jpeg_dec ${VPL_LIB_DIR}/vpl.lib)
target_link_libraries(multi_threaded ${VPL_LIB_DIR}/vpl.lib)
target_link_libraries(header_call_test ${VPL_LIB_DIR}/vpl.lib)
target_link_libraries(MPI_test ${MPI_CXX_LIBRARIES})
#include(cmake/CPM.cmake)
#
#CPMAddPackage(
#        NAME magic_enum
#        GITHUB_REPOSITORY Neargye/magic_enum
#        GIT_TAG v0.9.5
#)
#
#target_link_libraries(JPEG_DECODER magic_enum)
add_executable(dll_test dll_test.cpp)
target_link_libraries(dll_test SHARED double_step_qsv_jpeg_dec.dll)